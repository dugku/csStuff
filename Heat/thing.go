package main

import (
	"fmt"
	dem "github.com/markus-wa/demoinfocs-golang/v4/pkg/demoinfocs"
	"github.com/markus-wa/demoinfocs-golang/v4/pkg/demoinfocs/events"
	"log"
	"math"
	"os"
	"strings"
)

type vector struct {
	x, y, z float64
}

type Position struct {
	Name   string
	Points []vector
}

type singleVect struct {
	x, y, z float64
}

func main() {

	positions := []Position{
		{
			Name: "before pit",
			Points: []vector{
				{1250.205200, 1028.603149, 63.868896},
				{1246.671631, 809.016846, 64.008347},
				{1587.357422, 802.143066, 54.768353},
				{1581.968506, 1023.952820, 64.186935},
			},
		},
		{
			Name: "long corner",
			Points: []vector{
				{1268.032837, 1240.063232, 63.871250},
				{1577.968628, 1240.366577, 64.414597},
				{1581.946411, 1041.277466, 64.303261},
				{1250.119507, 1029.442993, 63.868500},
			},
		},
		{
			Name: "long",
			Points: []vector{
				{1268.027710, 1241.576538, 63.871250},
				{1577.968750, 1241.543213, 64.416443},
				{1593.968750, 1428.031616, 64.651169},
				{1593.968750, 1679.570801, 63.558159},
				{1607.385254, 2286.328125, 64.203362},
				{1293.302124, 2283.972900, 75.506744},
				{1270.029419, 2006.712402, 64.634491},
				{1252.031250, 1771.968628, 65.952271},
				{1238.028809, 1739.823486, 63.999874},
				{1238.027344, 1710.091064, 63.962753},
				{1252.031372, 1552.046387, 64.589767},
				{1268.031616, 1535.007446, 65.058388},
			},
		},
		{
			Name: "A car",
			Points: []vector{
				{1598.145508, 1688.361206, 63.506203},
				{1668.394531, 1812.030396, 63.694584},
				{1787.968750, 1812.029297, 65.534187},
				{1787.570923, 2029.898682, 67.389778},
				{1769.994873, 2263.968750, 67.244148},
				{1630.217651, 2265.693848, 64.521637},
			},
		},
		{
			Name: "A Ramp",
			Points: []vector{
				{1300.030396, 2292.478027, 76.169006},
				{1606.848633, 2288.476562, 64.632065},
				{1604.595459, 2747.971680, 173.092453},
				{1561.981812, 2751.127197, 175.101654},
				{1561.574707, 2817.377441, 184.768280},
				{1289.565186, 2807.946777, 189.863556},
			},
		},
		{
			Name: "A barrels",
			Points: []vector{
				{1561.542725, 2818.946045, 184.986389},
				{1267.048096, 2823.769775, 190.871246},
				{1263.983887, 3059.968750, 192.398972},
				{1561.968994, 3059.970459, 190.737411},
			},
		},
		{
			Name: "goose",
			Points: []vector{
				{1266.160889, 2823.429932, 190.871246},
				{1267.005859, 3059.630859, 192.426086},
				{1051.031250, 3059.968750, 193.891602},
				{1046.952637, 2637.163086, 159.803345},
				{1235.968750, 2636.806396, 160.360916},
				{1231.241943, 2814.005615, 190.871246},
			},
		},
		{
			Name: "A site",
			Points: []vector{
				{1235.972900, 2635.227783, 160.363800},
				{977.000366, 2630.523926, 160.187744},
				{977.987976, 2410.303711, 190.871246},
				{1040.609375, 2411.972656, 190.871246},
				{1042.058105, 2319.610352, 190.871246},
				{1269.666016, 2320.117676, 190.871246},
			},
		},
		{
			Name: "A Ct",
			Points: []vector{
				{1245.026245, 2038.026123, 65.312065},
				{1260.887451, 2283.972656, 76.070648},
				{537.237671, 2275.972168, -50.195251},
				{537.083130, 2072.027832, -49.369469},
				{910.089966, 2068.027832, 35.714752},
				{914.070007, 2042.022705, 38.580578},
			},
		},
		{
			Name: "elevator",
			Points: []vector{
				{1004.968567, 2379.932129, 85.676323},
				{1004.971130, 2305.840820, 81.027031},
				{850.244995, 2294.750732, 38.081223},
				{854.831299, 2379.968750, 41.161125},
			},
		},
		{
			Name: "boost",
			Points: []vector{
				{853.292969, 2379.785156, 40.891392},
				{854.622925, 2317.535156, 40.625751},
				{564.028076, 2298.136230, 36.058132},
				{564.031372, 2379.968750, 130.871246},
			},
		},
		{
			Name: "ninja",
			Points: []vector{
				{305.856537, 2678.831299, 160.755554},
				{302.341644, 2745.378418, 202.121246},
				{278.031677, 2745.462646, 202.121246},
				{278.031586, 2763.968750, 202.121246},
				{972.266663, 2763.595703, 162.143723},
				{972.926514, 2696.815430, 159},
			},
		},
		{
			Name: "A plat",
			Points: []vector{
				{978.581299, 2407.174072, 190.871246},
				{980.702209, 2692.364014, 159.612320},
				{305.830688, 2676.605957, 160.753036},
				{302.199646, 2522.161377, 161.106445},
				{278.031250, 2522.167969, 161.673355},
				{280.773804, 2434.312988, 161.597946},
			},
		},
		{
			Name: "t spawn",
			Points: []vector{
				{439.718689, -660.031250, 2.560889},
				{-2203.843506, -661.726013, 128.031250},
				{-2203.843750, -1031.968750, 128.234650},
				{-1787.968750, -1059.968750, 128.908234},
				{-299.907471, -1062.317139, 79.124397},
				{-299.968689, -1163.968750, 77.683266},
				{175.549255, -1163.968506, 41.031250},
				{175.215820, -999.971924, 6.044193},
				{439.718750, -999.968689, 6.044193},
			},
		},
		{
			Name: "beside suicide",
			Points: []vector{
				{363.966034, -644.193726, 49.682579},
				{-360.896729, -644.193726, 209.84350},
				{-361.306152, -428.352936, 72.871254},
				{-301.814026, -470.031372, 72.871254},
				{-84.031281, -470.029724, 72.871246},
				{-79.669800, -500.028809, 64.678314},
				{363.198792, -485.017090, 63.796303},
			},
		},
		{
			Name: "outside long",
			Points: []vector{
				{363.198944, -480.017334, 63.739334},
				{70.648300, -480.231506, 65.932632},
				{116.031693, -414.903839, 65.805458},
				{116.027390, -276.031067, 65.350204},
				{148.028870, -260.359558, 72.260780},
				{129.790115, 258.251862, 65.698196},
				{747.968933, 235.968811, 72.871246},
				{758.813049, -395.968872, 131.871246},
				{683.968811, -407.968567, 71.863297},
				{596.031250, -407.968628, 71.862495},
				{572.031372, -395.968903, 71.849487},
				{564.242859, -363.968414, 71.009453},
				{361.146332, -365.513824, 66.077339},
			},
		},
		{
			Name: "long doors",
			Points: []vector{
				{697.672607, 254.767014, 63.610771},
				{656.681274, 236.968460, 63.075157},
				{584.031494, 263.975983, 63.956169},
				{539.031433, 342.409576, 65.316719},
				{539.031616, 696.284119, 65.142883},
				{627.803833, 808.030151, 64.180824},
				{579.573120, 788.470276, 64.835739},
				{516.031494, 808.031555, 65.622589},
				{516.043762, 828.334167, 65.807953},
				{799.253479, 831.707336, 63.871185},
				{697.968445, 768.017395, 64.249031},
				{634.458069, 686.295044, 64.636261},
				{740.968628, 695.374390, 139.871246},
				{740.968567, 341.715576, 64.274200},
				{695.968323, 317.115173, 64.520599},
			},
		},
		{
			Name: "right outside long doors",
			Points: []vector{
				{516.028503, 843.141724, 65.855614},
				{1248.182373, 831.894592, 63.808716},
				{1249.062622, 1084.108765, 63.085182},
				{534.031616, 1065.703857, 65.428650},
				{516.028198, 1019.969360, 64.968933},
			},
		},
		{
			Name: "weird barrels spot",
			Points: []vector{
				{812.598938, 820.689148, 111.031250},
				{1248.459717, 822.011963, 63.871834},
				{1227.604248, 768.145081, 72.871246},
				{940.484680, 763.554932, 72.862495},
				{860.031494, 790.031372, 64.310844},
			},
		},
		{
			Name: "blue",
			Points: []vector{
				{1249.063110, 1085.161743, 63.062355},
				{1248.509277, 1195.968994, 63.788620},
				{534.032043, 1157.222046, 66.370781},
				{534.090393, 1087.834595, 65.444313},
			},
		},
		{
			Name: "side long",
			Points: []vector{
				{1227.968628, 767.334412, 72.871246},
				{944.332458, 760.631104, 72.449211},
				{982.028809, 706.556885, 71.098343},
				{968.031311, 585.968750, 73.168945},
				{968.031494, 215.031494, 75.596527},
				{1227.968750, 215.031296, 74.352737},
			},
		},
		{
			Name: "pit",
			Points: []vector{
				{1571.971802, 778.265442, 53.955860},
				{1292.031738, 772.169250, 55.282764},
				{1292.031494, 201.031494, -118.044296},
				{1571.968750, 201.031357, -116.855225},
				{1571.972412, 773.853088, 53.870598},
			},
		},
		{
			Name: "plat pit",
			Points: []vector{
				{1587.481934, 1017.635864, 64.231117},
				{1768.968384, 1007.791321, 127.509262},
				{1768.968628, 310.031250, 121.349365},
				{1636.031250, 310.031342, 121.430191},
				{1598.833496, 340.028351, 143.871246},
			},
		},
	}
	/*
		singlePoint := singleVect{
			x: -2145,
			y: -1345,
		}
	*/
	var callouts []string
	calloutsptr := &callouts
	f, err := os.Open("C:\\Users\\Mike\\Desktop\\csStuff\\Heat\\sangal-vs-faze-m2-dust2.dem")
	if err != nil {
		log.Panic("failed to open demo file: ", err)
	}
	defer f.Close()

	p := dem.NewParser(f)
	defer p.Close()

	killcount := 0
	killcountptr := &killcount
	// Register handler on kill events
	p.RegisterEventHandler(func(e events.Kill) {
		//calloutsLocal := []string{}
		*killcountptr = *killcountptr + 1
		victPoint := singleVect{
			x: e.Victim.Position().X,
			y: e.Victim.Position().Y,
		}

		for _, pos := range positions {
			inter, where := raycast(victPoint.x, victPoint.y, pos.Points, pos.Name)

			if inter == true {
				*calloutsptr = append(*calloutsptr, where)
			}
		}

		//fmt.Println(calloutsLocal)
	})

	// Parse to end
	err = p.ParseToEnd()
	if err != nil {
		log.Panic("failed to parse demo: ", err)
	}
	fmt.Println(*killcountptr)
	fmt.Println(len(*calloutsptr))
	//fmt.Println(*calloutsptr)

	countsEntries(calloutsptr, "blue")
}

func raycast(victx, victy float64, edges []vector, name string) (bool, string) {
	count := 0
	where := ""
	tolerance := 1e-7

	for i := 0; i < len(edges); i++ {
		curr := edges[i]
		next := edges[(i+1)%len(edges)]

		if curr.y == next.y {
			continue
		}

		if victy < math.Min(curr.y, next.y) || victy > math.Max(curr.y, next.y) {
			continue
		}

		xIntercept := (victy-curr.y)*(next.x-curr.x)/(next.y-curr.y) + curr.x

		//fmt.Printf("Edge from (%f, %f) to (%f, %f), Victim at (%f, %f), xIntercept: %f\n", curr.x, curr.y, next.x, next.y, victx, victy, xIntercept)

		if victx < xIntercept+tolerance {
			if where == "" {
				where = name
				//fmt.Printf("Ray crossed: %s\n", where)
			}
			count++
		}
	}

	//fmt.Printf("Final count: %d, Inside polygon: %v, Callout: %s\n", count, count%2 == 1, where)
	return count%2 == 1, where
}

func countsEntries(calls *[]string, e string) {
	var n int
	for _, i := range *calls {
		temp := strings.ToLower(i)
		if temp == strings.ToLower(e) {
			n++
		}
	}
	fmt.Println(e, n)
}

/*
(
func pointOnEdge(victx, victy, x1, y1, x2, y2, tolerance float64) bool {

		if math.Abs(y2-y1) < tolerance {
			return math.Abs(ypoint-y1) < tolerance && xpoint >= math.Min(x1, x2) && xpoint <= math.Max(x1, x2)
		}

		if x1 == x2 {
			return math.Abs(xpoint-x1) < tolerance && ypoint >= math.Min(y1, y2) && ypoint <= math.Max(y1, y2)
		}

		m := (y2 - y1) / (x2 - x1)
		b := y1 - m*1

		return math.Abs(ypoint-(m*xpoint+b)) < tolerance && xpoint >= math.Min(x1, x2) && xpoint <= math.Max(x1, x2)
	}
*/
func check(e error) {
	if e != nil {
		panic(e)
	}
}
