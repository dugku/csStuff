package main

import (
	"fmt"
	dem "github.com/markus-wa/demoinfocs-golang/v4/pkg/demoinfocs"
	"github.com/markus-wa/demoinfocs-golang/v4/pkg/demoinfocs/events"
	"log"
	"math"
	"os"
)

type vector struct {
	x, y, z float64
}

type Position struct {
	Name   string
	Points []vector
}

type singleVect struct {
	x, y, z float64
}

func main() {

	positions := []Position{
		{
			Name: "outside Long",
			Points: []vector{
				{147.844650, 260.441193, 2.848656},
				{747.968750, 235.968719, 9.031248},
				{758.809998, -395.969116, 68.031250},
				{116.031372, -406.210632, 2.459935},
			},
		},
		{
			Name: "long doors",
			Points: []vector{
				{539.031128, 342.409912, 1.567444},
				{740.968994, 342.439270, 0.525284},
				{740.968750, 695.373962, 76.031250},
				{539.031250, 696.419373, 1.395981},
			},
		},
		{
			Name: "Long Corner",
			Points: []vector{
				{516.059021, 808.031250, 1.952836},
				{1259.989990, 801.082214, 2.201162},
				{1242.646484, 1076.256592, 0},
				{534.031433, 1078.156982, 1.650675},
			},
		},
		{
			Name: "blue",
			Points: []vector{
				{534.140564, 1084.102661, 1.655276},
				{1217.093384, 1086.435669, -0.777832},
				{1204.786255, 1195.707764, 0.351828},
				{534.031555, 1157.209106, 2.955083},
			},
		},
		{
			Name: "side pit",
			Points: []vector{
				{927.721863, 776.322571, 9.031248},
				{1227.968628, 766.567261, 9.031248},
				{1227.968750, 215.031250, 11.459789},
				{968.031250, 215.029205, 13.133442},
			},
		},
		{
			Name: "pit",
			Points: []vector{
				{1292.029297, 777.767090, -4.984802},
				{1586.447998, 788.028503, -6.908508},
				{1571.968750, 201.028275, -179.261841},
				{1292.031250, 201.017014, -180.753174},
			},
		},
		{
			Name: "pit plateau",
			Points: []vector{
				{1609.090576, 1016.519775, 0.905896},
				{1768.968750, 1007.971680, 63.669273},
				{1768.973877, 310.031250, 58.242493},
				{1636.031250, 310.031342, 57.966408},
			},
		},
		{
			Name: "long",
			Points: []vector{
				{1281.368896, 827.300598, -0.031250},
				{1595.810181, 825.651184, -11.772156},
				{1603.906616, 2300.247803, 6.915963},
				{1300.065430, 2304.556641, 16.615967},
			},
		},
		{
			Name: "A Car",
			Points: []vector{
				{1618.800659, 1799.867432, 1.031250},
				{1787.968750, 1812.031250, 2.041022},
				{1770.244019, 2263.968750, 3.859961},
				{1633.739014, 2265.254395, 4.904446},
			},
		},
		{
			Name: "A ramp",
			Points: []vector{
				{1300.028442, 2319.716064, 20.095646},
				{1601.968750, 2321.175293, 11.542683},
				{1561.968628, 3059.968750, 129.031250},
				{1294.120605, 3046.397461, 129.031250},
			},
		},
		{
			Name: "A site",
			Points: []vector{
				{1015.050415, 2763.971191, 111.202438},
				{1269.072876, 2761.950439, 127.031250},
				{1273.886353, 2317.318115, 127.031250},
				{1035.984009, 2314.347168, 127.031250},
			},
		},
		{
			Name: "goose",
			Points: []vector{
				{1051.031250, 3059.897461, 131.480408},
				{1275.020630, 3053.694580, 128.673279},
				{1255.898926, 2775.104736, 127.031250},
				{1028.853027, 2763.968994, 111.201035},
			},
		},
		{
			Name: "a plat",
			Points: []vector{
				{963.846497, 2763.968750, 100.054077},
				{962.299377, 2407.462402, 127.051918},
				{516.756409, 2412.753662, 127.117165},
				{516.252319, 2763.824463, 97.506577},
			},
		},
		{
			Name: "boost",
			Points: []vector{
				{769.670959, 2379.968750, -35.112244},
				{766.189392, 2287.029297, -43.817749},
				{550.650818, 2275.722656, -102.784119},
				{564.031250, 2379.968750, 67.031250},
			},
		},
		{
			Name: "elevator",
			Points: []vector{
				{782.932617, 2379.968750, 0},
				{780.048706, 2314.385498, -38.444031},
				{1004.968323, 2300.325928, 22.166161},
				{1004.968689, 2379.968750, 27.467865},
			},
		},
		{
			Name: "ct mid",
			Points: []vector{
				{-340.697388, 1825.788452, -119.341309},
				{-337.031372, 2423.968750, -87.113892},
				{-1273.968384, 2500.336182, 47.130901},
				{-1273.968506, 2098.102051, 12.495328},
			},
		},
		{
			Name: "a short",
			Points: []vector{
				{-69.834961, 1348.028809, 0.570444},
				{489.968628, 1365.031250, 74.531250},
				{474.520630, 2763.971680, 97.376320},
				{278.031250, 2763.969727, 138.281250},
			},
		},
		{
			Name: "Scaff",
			Points: []vector{
				{-1066.291138, 2553.935303, 28.188885},
				{-1070.031372, 2694.361084, 139.238068},
				{-1215.968262, 2684.172363, 89.266769},
				{-1273.968628, 2574.405029, 69.979843},
			},
		},
		{
			Name: "window",
			Points: []vector{
				{-1273.968628, 2589.522949, 102.296410},
				{-1243.241333, 2685.686768, 121.996140},
				{-1332.989136, 2683.941895, 130.031250},
				{-1329.287109, 2566.210693, 246.521271},
			},
		},
		{
			Name: "B site",
			Points: []vector{
				{-1693.657471, 2855.968750, 19.913235},
				{-1693.036865, 2497.951660, 10.189287},
				{-1366.031250, 2499.551514, 5.162106},
				{-1364.031738, 2765.151123, 17.576881},
			},
		},
		{
			Name: "B Plat",
			Points: []vector{
				{-1782.653320, 1883.727661, 0.047074},
				{-1782.653320, 1883.727661, 0.047074},
				{-1626.003662, 1620.067505, 2.318254},
				{-2093.968750, 3115.812500, 35.676537},
			},
		},
		{
			Name: "B Car",
			Points: []vector{
				{-1768.981689, 1951.116821, -3.701050},
				{-1707.972046, 1620.035645, 2.810337},
				{-1621.926636, 1629.005127, 0},
				{-1463.445801, 1843.369873, 0.995509},
			},
		},
		{
			Name: "Out B",
			Points: []vector{
				{-1942.032349, 1780.108154, 33.031250},
				{-1942.031494, 1417.806396, 33.650471},
				{-2025.968628, 1413.606934, 33.533016},
				{-2025.968262, 1777.759155, 33.031250},
			},
		},
		{
			Name: "Upper",
			Points: []vector{
				{-2026.498901, 1375.216919, 33.241188},
				{-1160.630005, 1261.970215, 32.031250},
				{-1063.020874, 1151.670166, -55.737488},
				{-1240.615356, 1042.906494, 28.461498},
				{-2168.968750, 1042.031494, 40.183575},
			},
		},
		{
			Name: "Lower",
			Points: []vector{
				{-1199.968750, 1343.031250, -106.130737},
				{-1199.968750, 1507.968750, -75.968750},
				{-556.031250, 1517.968750, -110.791504},
				{-556.031250, 1334.031494, -108.308960},
			},
		},
		{
			Name: "mid",
			Points: []vector{
				{-342.032104, 1588.128296, -126.481079},
				{-283.870728, 542.408203, -1.652832},
				{-508.382690, 522.812134, 9.031250},
				{-489.968750, 1582.369141, -123.841431},
			},
		},
		{
			Name: "catwalk",
			Points: []vector{
				{-149.031311, 541.923828, 5.031250},
				{-250.136353, 556.403625, 44.038315},
				{-249.998657, 1516.968628, 32.270920},
				{-135.699219, 1516.885498, 0.712770},
			},
		},
		{
			Name: "top mid",
			Points: []vector{
				{-663.968750, 212.031357, 57.031250},
				{-725.010132, 493.968750, 25.031250},
				{459.968536, 453.735809, 2.261001},
				{442.656189, 285.764832, 1.959271},
			},
		},
		{
			Name: "t spawn",
			Points: []vector{
				{363.970642, -633.526062, 49.727432},
				{439.718658, -999.968750, 6.044193},
				{-2203.843750, -1031.968750, 128.234650},
				{-2167.314941, -631.594299, 128.031250},
			},
		},
		{
			Name: "t ramp",
			Points: []vector{
				{-2104.385986, -564.764832, 121.723419},
				{-2057.968994, -136.031250, 14.540024},
				{-1812.031372, -143.315002, 16.360966},
				{-1816.977295, -632.497253, 128.656204},
			},
		},
		{
			Name: "outside tuns",
			Points: []vector{
				{-2027.972168, -94.027100, 9.237110},
				{-1428.332764, -107.970459, 116.031250},
				{-1332.035034, 590.968750, 38.831493},
				{-2043.968750, 589.968628, 38.155651},
			},
		},
		{
			Name: "suicide",
			Points: []vector{
				{-491.968750, -593.968750, 2.486519},
				{-488.866089, 191.303925, 3.614970},
				{-405.031372, 192.958389, -0.092651},
				{-345.788086, -593.967957, 0.972001},
			},
		},
		{
			Name: "B doors",
			Points: []vector{
				{-1370.977173, 2098.029541, 3.581966},
				{-1386.966187, 2305.656738, 0.216174},
				{-1271.561035, 2301.627686, 8.185972},
				{-1269.662598, 2109.360107, 11.435002},
			},
		},
		{
			Name: "B",
			Points: []vector{
				{x: -2157.968750, y: 1814.031250, z: 4.079795},
				{x: -1394.029907, y: 1921.390747, z: 6.602032},
				{x: -1426.138550, y: 2296.525391, z: 0.031250},
				{x: -2155.968994, y: 2407.661865, z: 26.785873},
			},
		},
		{
			Name: "CT",
			Points: []vector{
				{x: -305.157532, y: 2282.190674, z: -56.017906},
				{x: -309.875610, y: 2003.236450, z: -63.252457},
				{x: 517.583923, y: 2072.057373, z: -54.244278},
				{x: 487.968903, y: 2531.969238, z: -43.128754},
			},
		},
		{
			Name: "A CT",
			Points: []vector{
				{x: 1247.394531, y: 2272.559570, z: 74.800255},
				{x: 541.095581, y: 2273.787354, z: -49.350433},
				{x: 552.380615, y: 2072.031982, z: -45.545120},
				{x: 1220.475952, y: 2038.028687, z: 65.447357},
			},
		},
		{
			Name: "where is this",
			Points: []vector{
				{-317.436279, -593.876526, 64.613564},
				{-319.809448, -470.031250, 72.871246},
				{21.278990, -500.031677, 65.271194},
				{-9.482361, -593.960205, 66.014023},
			},
		},
	}
	/*
		singlePoint := singleVect{
			x: -2145,
			y: -1345,
		}
	*/
	var callouts []string
	calloutsptr := &callouts
	f, err := os.Open("C:\\Users\\Mike\\Desktop\\csStuff\\Heat\\nouns-fe-vs-lumen-fe-m2-dust2.dem")
	if err != nil {
		log.Panic("failed to open demo file: ", err)
	}
	defer f.Close()

	p := dem.NewParser(f)
	defer p.Close()

	killcount := 0
	killcountptr := &killcount
	// Register handler on kill events
	p.RegisterEventHandler(func(e events.Kill) {
		//calloutsLocal := []string{}
		*killcountptr = *killcountptr + 1
		victPoint := singleVect{
			x: e.Victim.Position().X,
			y: e.Victim.Position().Y,
		}

		for _, pos := range positions {
			inter, where := raycast(victPoint.x, victPoint.y, pos.Points, pos.Name)

			if inter == true {
				*calloutsptr = append(*calloutsptr, where)
			}
		}

		//fmt.Println(calloutsLocal)
	})

	// Parse to end
	err = p.ParseToEnd()
	if err != nil {
		log.Panic("failed to parse demo: ", err)
	}
	fmt.Println(*killcountptr)
	fmt.Println(len(*calloutsptr))
}

func raycast(victx, victy float64, edges []vector, name string) (bool, string) {
	count := 0
	where := ""
	tolerance := 1e-7

	for i := 0; i < len(edges); i++ {
		curr := edges[i]
		next := edges[(i+1)%len(edges)]

		if curr.y == next.y {
			continue
		}

		if victy < math.Min(curr.y, next.y) || victy > math.Max(curr.y, next.y) {
			continue
		}

		xIntercept := (victy-curr.y)*(next.x-curr.x)/(next.y-curr.y) + curr.x

		//fmt.Printf("Edge from (%f, %f) to (%f, %f), Victim at (%f, %f), xIntercept: %f\n", curr.x, curr.y, next.x, next.y, victx, victy, xIntercept)

		if victx < xIntercept+tolerance {
			if where == "" {
				where = name
				//fmt.Printf("Ray crossed: %s\n", where)
			}
			count++
		}
	}

	//fmt.Printf("Final count: %d, Inside polygon: %v, Callout: %s\n", count, count%2 == 1, where)
	return count%2 == 1, where
}

func printSlice(deaths []string) {
	fmt.Println(deaths)
}

/*
(
func pointOnEdge(victx, victy, x1, y1, x2, y2, tolerance float64) bool {

		if math.Abs(y2-y1) < tolerance {
			return math.Abs(ypoint-y1) < tolerance && xpoint >= math.Min(x1, x2) && xpoint <= math.Max(x1, x2)
		}

		if x1 == x2 {
			return math.Abs(xpoint-x1) < tolerance && ypoint >= math.Min(y1, y2) && ypoint <= math.Max(y1, y2)
		}

		m := (y2 - y1) / (x2 - x1)
		b := y1 - m*1

		return math.Abs(ypoint-(m*xpoint+b)) < tolerance && xpoint >= math.Min(x1, x2) && xpoint <= math.Max(x1, x2)
	}
*/
func check(e error) {
	if e != nil {
		panic(e)
	}
}
